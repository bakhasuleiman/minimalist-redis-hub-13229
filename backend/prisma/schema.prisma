generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  username       String         @unique
  name           String
  password       String
  role           String         @default("USER")
  isHidden       Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  activities     Activity[]
  sharedArticles ArticleShare[]
  articles       Article[]
  feedbacks      Feedback[]
  sharedGoals    GoalShare[]
  goals          Goal[]
  sharedNotes    NoteShare[]
  notes          Note[]
  sharedTasks    TaskShare[]
  tasks          Task[]
  transactions   Transaction[]

  @@map("users")
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  completed   Boolean     @default(false)
  privacy     String      @default("PRIVATE")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  shares      TaskShare[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model TaskShare {
  id     String @id @default(cuid())
  taskId String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_shares")
}

model Note {
  id        String      @id @default(cuid())
  title     String
  content   String
  privacy   String      @default("PRIVATE")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String
  shares    NoteShare[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model NoteShare {
  id     String @id @default(cuid())
  noteId String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([noteId, userId])
  @@map("note_shares")
}

model Goal {
  id          String      @id @default(cuid())
  title       String
  description String?
  progress    Int         @default(0)
  deadline    DateTime?
  privacy     String      @default("PRIVATE")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  shares      GoalShare[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model GoalShare {
  id     String @id @default(cuid())
  goalId String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal   Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@unique([goalId, userId])
  @@map("goal_shares")
}

model Transaction {
  id        String   @id @default(cuid())
  title     String
  amount    Float
  type      String
  currency  String   @default("RUB")
  privacy   String   @default("PRIVATE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Article {
  id        String         @id @default(cuid())
  title     String
  content   String
  published Boolean        @default(false)
  privacy   String         @default("PRIVATE")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    String
  shares    ArticleShare[]
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("articles")
}

model ArticleShare {
  id        String  @id @default(cuid())
  articleId String
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([articleId, userId])
  @@map("article_shares")
}

model Activity {
  id        String   @id @default(cuid())
  action    String
  details   String
  type      String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Feedback {
  id         String   @id @default(cuid())
  type       String
  title      String
  message    String
  email      String?
  status     String   @default("OPEN")
  adminReply String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

model SiteSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}
