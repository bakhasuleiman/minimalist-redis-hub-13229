import { db } from '../src/lib/db';
import bcrypt from 'bcryptjs';

async function createAdminUser() {
  try {
    // Check if admin already exists
    const existingAdmin = await db.user.findUnique({
      where: { username: 'admin' }
    });

    if (existingAdmin) {
      console.log('‚ùå Admin user already exists');
      return;
    }

    // Hash the password
    const hashedPassword = await bcrypt.hash('Zxc11!', 10);

    // Create admin user
    const admin = await db.user.create({
      data: {
        email: 'admin@system.local',
        username: 'admin',
        name: 'System Administrator',
        password: hashedPassword,
        role: 'ADMIN',
        isHidden: true
      }
    });

    // Create initial site settings
    const defaultSettings = [
      {
        key: 'site_name',
        value: 'Minimalist Redis Hub',
        description: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞'
      },
      {
        key: 'site_description',
        value: '–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞'
      },
      {
        key: 'max_users',
        value: '1000',
        description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
      },
      {
        key: 'registration_enabled',
        value: 'true',
        description: '–†–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
      }
    ];

    for (const setting of defaultSettings) {
      await db.siteSettings.upsert({
        where: { key: setting.key },
        update: { value: setting.value },
        create: setting
      });
    }

    console.log('‚úÖ Admin user created successfully');
    console.log('üìß Email: admin@system.local');
    console.log('üë§ Username: admin');
    console.log('üîë Password: Zxc11!');
    console.log('üéõÔ∏è Role: ADMIN');
    console.log('üëª Hidden: true');
    console.log('‚öôÔ∏è Initial site settings created');

  } catch (error) {
    console.error('‚ùå Error creating admin user:', error);
  } finally {
    await db.$disconnect();
  }
}

createAdminUser();